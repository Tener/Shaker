Shaker is a build tool which allow to compile and launch test on haskell project with some features like continuous action similar to SBT.
For now, all configuration are made via cabal. Shaker will read cabal configuration to discover source directories, compilation options and targets to compile.

h2. Installation 

You can either install shaker using cabal-install or by building it yourself.

1. Using cabal-install

<pre>
cabal install shaker 
</pre>

2. Building from sources

<pre>
runhaskell Setup.hs configure && runhaskell Setup.hs build && runhaskell Setup.hs install
</pre>

h2. Usage

The cabal configuration file should be generated beforehand. 
<pre>
runhaskell Setup.hs configure
</pre>
If you change your cabal configuration, you need to recreate the configuration file. 

h3. Execution
In the root of your project, launch
<pre>
shaker
</pre>
An interactive prompt will allow you to execute differents action.

h3. Action execution

h4. Simple Execution
An action can be launched normally, by entering the action name 
<pre>
Compile
</pre>
It will compile the projet and give the control back.

h4. Multiple action execution
You can specify multiple action to execute.
<pre>
Clean Compile
</pre>
It will clean all .o and .hi files before Compiling the project.

h4. Continuous action
A continuous action will execute the action when a changement on files has been detected.
Every action are elligible to continuous action, you simply need to prefix them with '~'

<pre>
~Compile
</pre>
It will compile the project every time a change in the code has been detected.
To get control back, simply enter a character.

h3. Actions available

h4. Compile

Compile the project. Targets of the compilation are main file (in case of executable) or exposed modules (in case of library).

h4. FullCompile

Compile all hs files found in source directory. It is usefull to compile test sources.

h4. Clean

Clean the directory containing .o and .hi files.

h4. Quit 

Exit the application.

